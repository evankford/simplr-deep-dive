<?php

namespace EKF_CF\Inc\Fields;
use StoutLogic\AcfBuilder\FieldsBuilder as FieldsBuilder;

use EKF_CF\Inc\Fields\Components;
use EKF_CF\Inc\Fields\Views;
use EKF_CF\Inc\Fields\Blocks;

/**
 * Fired during plugin activation
 *
 * This class defines all code necessary to run during the plugin's activation.
 *
 * @link       http://example.com
 * @since      1.0.0
 *
 * @author     Your Name or Your Company
 **/




class Fields {

	/**
	 * Short Description.
	 *
	 * Long Description.
	 *
	 * @since    1.0.0
	 */

  public static $json_path;


  public function __construct() {
		$this->live = $this->test_acf();
		if ($this->live) {
			acf_add_options_page(['page_title'=> __("Site Options"), 'menu_slug' => 'site-options', 'autoload' => true]);
		}
	}

	public static function test_acf() {
		if (function_exists('get_field')) {
			return true;
		}
	}
	public function create_fields() {
		if (function_exists('get_field')) {
			$this->init();
			$this->add_instructions();
		}
	}

	public  function init() {

		$this->createMainPage();
		$this->aboutPages();
		$this->create_site();
		$this->create_default();
		$this->filters();
		$this->imageFocus();

	}

	public function add_instructions() {
		add_action('edit_form_after_editor', function() {
			echo '<p class="ekf-cf-instructions">';
				if ('artist' === get_post_type()) {
					echo 'Add an artist description/bio. This will be used in autogenerated about sections and on the artist archive of releases.';
				} elseif ('release' == get_post_type()) {
					echo 'Add an release description. This will be used on the page as "About the release" content.';
				}
			echo '</p>';
		});
	}

	public function imageFocus() {
		$image_focus = new FieldsBuilder('Image Focal Point');
		$image_focus
			->addRange('horizontal', ['label' => "Horizontal Center", "min" => 0, "max" => 100, "step" => 1])
				->setDefaultValue(50)
			->addRange('vertical', ['label' => "Vertical Center", "min" => 0, "max" => 100, "step" => 1])
				->setDefaultValue(50)
			->setLocation('attachment', '==', 'image');
			add_action('acf/init', function() use ($image_focus) {
				acf_add_local_field_group($image_focus->build());
			});
	}

	public function createMainPage() {
		$main_page = Views\Home::create();
			add_action('acf/init', function() use ($main_page) {
				acf_add_local_field_group($main_page->build());
			});
	}
	public function aboutPages() {
		$about_main = Views\About::create();
			add_action('acf/init', function() use ($about_main) {
				acf_add_local_field_group($about_main->build());
			});
		$partners = Views\Partners::create();
			add_action('acf/init', function() use ($partners) {
				acf_add_local_field_group($partners->build());
			});
		$team = Views\Team::create();
			add_action('acf/init', function() use ($team) {
				acf_add_local_field_group($team->build());
			});
	}

	public function create_site() {
		$options = Views\Site::create();

		add_action('acf/init', function() use ($options) {
			acf_add_local_field_group($options->build());
		});
	}

	public function create_default() {
		$default = Views\BasicFields::create();
		add_action('acf/init', function() use ($default) {
			acf_add_local_field_group($default->build());
		});
	}

	public function filters() {
		add_filter('acf/load_field/name=signup_form', function($field) {
			$nums = [1,2,3,4,5,6,7,8,9];
			$ids =[];
			$titles =[];
			if (class_exists('Ninja_Forms')) {
				$forms = Ninja_Forms()->form()->get_forms();
				if (isset($forms) && sizeof($forms) > 0) {
					foreach ($forms as $form) {
						$id = $form->get_id();
						$title = $form->get_setting('title');
						$field['choices'][$id] = $title;
						// array_push($ids, $id);
						// array_push($titles, $title);
					}
				}
			}
			return $field;
	});
	}
}

