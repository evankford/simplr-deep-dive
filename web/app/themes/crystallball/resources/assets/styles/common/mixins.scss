

// Grid
$grid-tiny: 510px;
$grid-medium: 820px;
$grid-large: 1020px;
$grid-widescreen: 1280px;
$grid-max-width: 1400px;
$grid-gutter: 30px;

// Breakpoints used with the media-query mixin
$tiny: "tiny";
$small: "small";
$medium: "medium";
$medium-down: "medium-down";
$medium-up: "medium-up";
$marge: "medium-up";
$large: "large";
$large-down: "large-down";
$large-up: "large-up";
$widescreen: "widescreen";

$breakpoints: (
  $tiny "(max-width: #{$grid-tiny - 1})",
  $small "(max-width: #{$grid-medium - 1})",
  $medium "(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})",
  $medium-down "(max-width: #{$grid-large - 1})",
  $medium-up "(min-width: #{$grid-medium})",
  $marge "(min-width: #{$grid-medium}) and (max-width: #{$grid-widescreen - 1})",
  $large "(min-width: #{$grid-large}) and (max-width: #{$grid-widescreen - 1})",
  $large-down "(max-width: #{$grid-widescreen - 1})",
  $large-up "(min-width: #{$grid-large})",
  $widescreen "(min-width: #{$grid-widescreen})"
);


@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }
}

@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

$shortTransitionTime: 250ms;
$mediumTransitionTime: 520ms;
$longTransitionTime: 700ms;

$delayFirst: 140ms;
$delaySecond: 140ms * 2;
$delayThird: 140ms * 3;
$delayFourth: 140ms * 4;
$delayFifth: 140ms * 5;

@mixin transition($delay: 0ms, $length: "short") {
  @if ($length == "medium") {
    transition: opacity $mediumTransitionTime $delay $ease, transform $mediumTransitionTime $delay $ease;
  }

  @else if ($length == "long") {
    transition: opacity $longTransitionTime $delay $ease, transform $longTransitionTime $delay $ease;
  }

  @else if ($length == "short") {
    transition: opacity $shortTransitionTime $delay $ease, transform $shortTransitionTime $delay $ease;
  }

  @else {
    transition: opacity $length $delay $ease, transform $length $delay $ease;
  }
}


$ease: cubic-bezier(0.77, 0, 0.175, 1);

%psuedoish {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  display: block;
}

%psuedo {
  @extend %psuedoish;

  content: "";
}

%hover {
  transition: transform 300ms $ease;

  &:hover {
    transform: transform3d(0, -2px,0);
  }
}
.hover-after,
%hoverAfter {
  position: relative;
  display: inline-block;
  overflow: hidden;
  padding-bottom: 1px;
  @include transition();

  &::after {
    @include transition();
    @extend %psuedo;
    top: auto;
    bottom: 0;
    height: 1px;
    opacity: 0.35;
    transform: translateX(0%);
    background: currentColor;
  }
  &::before {
    @include transition();
    @extend %psuedo;
    top: auto;
    bottom: 0;
    height: 1px;
    opacity: 1;
    transform: translateX(110%);
    background: currentColor;
  }

  &:hover {
    transform: translateY(-2px);
    &::after {
      transform: translateX(-110%);
    }
    &::before {
      transform: translateX(0%);
    }
  }
}

@mixin object-fit($style: cover, $position: 50% 50%) {
  object-fit: $style;
  object-position: $position;
  font-family: "object-fit: #{$style}; object-position: #{$position};";
}



.object-contain-child {
  .responsive-image,
  img {
    height: 100% !important;
    @include object-fit(contain);
  }
}